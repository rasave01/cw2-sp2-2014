<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2014-11-10T09:20:00Z</updated>
  <entry>
    <title>SpringOne2GX 2014 Keynote Day 1 - Platform Reinvented</title>
    <link rel="alternate" href="https://spring.io/blog/2014/11/10/springone2gx-2014-keynote-day-1-platform-reinvented" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2014-11-10:1813</id>
    <updated>2014-11-10T09:20:00Z</updated>
    <content type="html">&lt;p&gt;Platform Reinvented &lt;/p&gt;

&lt;p&gt;Recorded at SpringOne2GX 2014&lt;/p&gt;

&lt;p&gt; Speakers:  Hugh Williams, Juergen Hoeller, Dave Syer, Andy Glover (NetFlix), Graeme Rocher&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Link to Slides:
&lt;a href="http://www.slideshare.net/SpringCentral/spring-one2gx-2014keynotev8"&gt;http://www.slideshare.net/SpringCentral/spring-one2gx-2014keynotev8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;iframe width="560" height="315" src="//www.youtube.com/embed/xU267-YHN5c" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Keynote Day 2 - Platform Reinvented</title>
    <link rel="alternate" href="https://spring.io/blog/2014/11/10/springone2gx-2014-keynote-day-2-platform-reinvented" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2014-11-10:1814</id>
    <updated>2014-11-10T09:19:00Z</updated>
    <content type="html">&lt;p&gt;Platform Reinvented &lt;/p&gt;

&lt;p&gt;Recorded at SpringOne2GX 2014&lt;/p&gt;

&lt;p&gt; Speakers:  Juergen Hoeller, Mark Fisher, Dave Syer, Jon Brisbin&lt;/p&gt;

&lt;p&gt;Link to Slides:
&lt;a href="http://www.slideshare.net/SpringCentral/springone2gx-2014"&gt;http://www.slideshare.net/SpringCentral/springone2gx-2014&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;iframe width="560" height="315" src="//www.youtube.com/embed/WVSnKHOlyrE" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Gaining Application Lifecycle Intelligence</title>
    <link rel="alternate" href="https://spring.io/blog/2014/11/10/springone2gx-2014-replay-gaining-application-lifecycle-intelligence" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2014-11-10:1816</id>
    <updated>2014-11-10T09:13:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014 in Dallas, TX. &lt;/p&gt;

&lt;p&gt;Speaker: Damien Dallimore, Splunk&lt;/p&gt;

&lt;p&gt;Today we are facing an ever-increasing speed of product delivery. DevOps practices like continuous integration and deployment increase the dependence of systems like task tracking and source code repositories with build servers and test suites. With data moving rapidly through these different tools, it becomes challenging to maintain a grasp of the process, especially as the data is distributed and in a variety of formats. But it is still critical to maintain full visibility of the product development journey – from user stories to production data. By starting at the beginning of the Product Development Lifecycle, you can track a problem in production all the way back to the code that was checked into the build and the developer responsible for the code. In this session I'll demonstrate some of the ways in which Splunk software can be used to collect and correlate data throughout the various stages of the lifecycle of your code, to ultimately make you more efficient and make your code better.&lt;/p&gt;

&lt;p&gt;Link to Slides:&lt;a href="http://www.slideshare.net/SpringCentral/gaining-application-lifecycle-intelligence"&gt;http://www.slideshare.net/SpringCentral/gaining-application-lifecycle-intelligence&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;iframe width="560" height="315" src="//www.youtube.com/embed/v2xNJGefxx4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>Webinar Replay: Security for Microservices with Spring and OAuth2</title>
    <link rel="alternate" href="https://spring.io/blog/2014/11/07/webinar-replay-security-for-microservices-with-spring-and-oauth2" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2014-11-07:1812</id>
    <updated>2014-11-07T09:55:00Z</updated>
    <content type="html">&lt;p&gt; Speaker: Dave Syer &lt;/p&gt;

&lt;p&gt;Slides: &lt;a href="http://projects.spring.io/spring-security-oauth/"&gt;http://projects.spring.io/spring-security-oauth/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OAuth2 is a lightweight security protocol that is well-suited for use with HTTP, the protocol at the heart of many modern architectures. Spring Security OAuth2 has a load of new features, not the least of which being the `@Configuration` support in version 2.0. Combine these with Spring Boot and you have a platform which can get you a secure HTTP service application in about 20 lines of code. This presentation shows how the combination of rapid development and production-ready features in the modern Spring stack are a perfect mixture for developing secure components in a system composed of microservices. We explore the new features in Spring OAuth2, guide you through the choice of which to use and when, and show how easy they are to enable quickly.&lt;/p&gt;

&lt;p&gt; Learn more about Spring Security OAUTH: &lt;a href="http://projects.spring.io/spring-security-oauth"&gt;http://projects.spring.io/spring-security-oauth&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; Learn more about Spring Cloud: &lt;a href="http://projects.spring.io/spring-security-oauth"&gt;http://projects.spring.io/spring-security-oauth&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;iframe width="420" height="315" src="//www.youtube.com/embed/yePeJ6NDZQk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud 1.0.0.M2 Available Now</title>
    <link rel="alternate" href="https://spring.io/blog/2014/11/05/spring-cloud-1-0-0-m2-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Dave Syer</name>
    </author>
    <id>tag:spring.io,2014-11-05:1811</id>
    <updated>2014-11-05T13:43:00Z</updated>
    <content type="html">&lt;p&gt;If you are building microservices with Spring you will be interested
to see that &lt;a href="http://projects.spring.io/spring-cloud"&gt;Spring Cloud&lt;/a&gt;
1.0.0.M2 hit the streets yesterday and today, and can now be found in
the Spring &lt;a href="http://repo.spring.io"&gt;repository&lt;/a&gt;. Visit the individual
project pages links in the main
&lt;a href="http://projects.spring.io/spring-cloud"&gt;umbrella page&lt;/a&gt; or look at
their &lt;a href="https://github.com/spring-cloud"&gt;github repositories&lt;/a&gt; for
detailed instructions about how to get started using the individual
components. There is also a
&lt;a href="http://projects.spring.io/spring-cloud/spring-cloud.html"&gt;Reference Guide&lt;/a&gt;
covering the core modules.&lt;/p&gt;

&lt;p&gt;Since Spring Cloud is an umbrella project we have a "release train" of
related updates to all the sub-projects (like with Spring Data). The
1.0.0.M2 release has updates to
&lt;a href="http://cloud.spring.io/spring-cloud-config/"&gt;spring Cloud Config&lt;/a&gt;,
&lt;a href="http://cloud.spring.io/spring-cloud-netflix/"&gt;Spring Cloud Netflix&lt;/a&gt;,
&lt;a href="http://cloud.spring.io/spring-cloud-bus/"&gt;Spring Cloud Bus&lt;/a&gt;,
&lt;a href="http://cloud.spring.io/spring-cloud-security/"&gt;Spring Cloud Security&lt;/a&gt;
and &lt;a href="http://cloud.spring.io/spring-cloud-cli/"&gt;Spring Cloud CLI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is also a new member of the family, so a warm welcome welcome
please for
&lt;a href="http://cloud.spring.io/spring-cloud-aws/"&gt;Spring Cloud for Amazon Web Services&lt;/a&gt;.
This toolkit eases the integration with hosted Amazon Web Services. It
offers a convenient way to interact with AWS provided services using
well-known Spring idioms and APIs, such as the messaging or caching
API. Developers can build their application around the hosted services
without having to care about infrastructure or maintenance. It has
been contributed by our friends at &lt;a href="http://mimacom.com"&gt;Mimacom AG&lt;/a&gt;,
and we expect to be working closely with them as Spring Cloud moves
towards its first umbrella release.&lt;/p&gt;

&lt;p&gt;There are plenty of samples, including the demos from recent webinars
and conferences, in the separate
&lt;a href="https://github.com/spring-cloud-samples"&gt;spring-cloud-samples&lt;/a&gt;
organization at GitHub. In particular there is a "scripts" aggregator
project which has git submodules for all the samples and libraries, and
there is a 1.0.0.M2 branch if you want to play with them using a stable
binary build. In the scripts project you will also find a load of
Groovy CLI applications in a "demo" folder, and shell scripts for
building and running locally, and for deploying the apps to Cloud
Foundry.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring  - November 4th, 2014</title>
    <link rel="alternate" href="https://spring.io/blog/2014/11/04/this-week-in-spring-november-4th-2014" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2014-11-04:1809</id>
    <updated>2014-11-04T12:53:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;!  This week I'm on the road talking to enthusiastic Spring developers  in Casablanca,  Morocco at the &lt;a href="http://www.jmaghreb.io/"&gt;JMaghreb&lt;/a&gt; conference  and then it's  off to London (again!) for the amazing &lt;a href="http://spring.io/blog/2014/10/29/pivotal-at-spring-exchange-2014-in-london-uk"&gt;Spring eXchange&lt;/a&gt;. If you're at either, be sure to say hi! &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Artem Bilan, Spring Integration ninja and a personal hero of mine, has &lt;a href="http://spring.io/blog/2014/10/31/spring-integration-java-dsl-1-0-rc1-released"&gt;just announced the Spring Integration RC1&lt;/a&gt; release. I don't know if you've seen the Java configuration DSL, but it makes writing complex integration flows a breeze! It takes advantage of Java 8's lamba support. Check it out! Remember, microservices aren't exclusively REST centric. If you're trying to build a microservice and expose it over any other mechanism, I'd start with Spring Integration.&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;Spring ninja Thomas Risberg just &lt;a href="http://spring.io/blog/2014/11/03/spring-for-apache-hadoop-2-0-3-released"&gt;announced Spring for Hadoop 2.0.3&lt;/a&gt;! This release adds support for  Apache Hadoop 2.5.1 (hadoop25) and Pivotal HD 2.1 (phd21).&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://spring.io/blog/2014/11/03/spring-data-evans-sr1-released"&gt;Spring Data ninja Christoph Strobl just announced Spring Data Evans service release 1 (SR1)&lt;/a&gt;. The new release contains many important updates and is a recommended upgrade.&lt;/li&gt;
&lt;li&gt;I'll be doing a webinar  with ZeroTurnaround's Adam Koblentz introducing how to use &lt;a href="http://spring.io/blog/2014/10/28/webinar-spring-boot-and-jrebel-6-0"&gt;Spring (and Spring  Boot in particular) and JRebel 6&lt;/a&gt;. Spring Boot makes Java as productive as it can get, but sometimes you need a little bit more to get around Java's traditionally awful support for things like live-reloading code during development (to expedite iteration). In this webinar, we'll look at how that's done with JRebel!&lt;/li&gt;
&lt;li&gt;Check out the replay of my webinar about &lt;a href="http://spring.io/blog/2014/11/04/webinar-replay-building-bootful-uis-with-spring-boot-and-vaadin"&gt;Building “Bootful” UIs with Spring Boot and Vaadin &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Check out the replay of Russ Danner's  webinar introducing &lt;a href="http://spring.io/blog/2014/10/30/webinar-replay-content-enabled-web-and-mobile-applications-with-spring-groovy-and-crafter"&gt;how to build content-enabled web and mobile applications&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;I loved Matt Raible's epic post introducing how he built &lt;a href="http://raibledesigns.com/rd/entry/building_a_rest_api_with"&gt;a REST API using Spring MVC, SPring Data REST (HAL support), Swagger, Liquibase, and JAXB&lt;/a&gt;, all of it of course &lt;a href="http://start.spring.io"&gt;through Spring Boot&lt;/a&gt;. This post earned a bookmark! &lt;/li&gt;
&lt;li&gt;Did you see Thomas Risberg's epic talk on &lt;em&gt;Spring Boot for Hadoop&lt;/em&gt; at the meetup last week in Boston? If not, &lt;a href="http://github.com/trisberg/bostonhadoop"&gt;check out the code and slides on GitHub&lt;/a&gt;! They're illuminating! &lt;/li&gt;
&lt;li&gt;Dennis Schulte,  over on the CodeCentric blog put together a &lt;em&gt;very&lt;/em&gt; nice post on &lt;a href="http://blog.codecentric.de/en/2014/10/log-management-spring-boot-applications-logstash-elastichsearch-kibana/"&gt;using Logstash, ElasticSearch, and Spring Boot&lt;/a&gt;. Check it out!&lt;/li&gt;
&lt;li&gt;I spent some time helping a misguided few with the &lt;a href="http://spring.io/blog/2014/11/04/a-quality-qualifier"&gt;nuances of Spring's &lt;code&gt;@Qualifier&lt;/code&gt; annotation&lt;/a&gt; and published the details on the Spring blog. Hopefully this is helpful for somebody out there!&lt;/li&gt;
&lt;li&gt;Ben Hale, who leads the Java experience on Cloud Foundry and who is a Spring rockstar in his own right, did a &lt;a href="http://blog.newrelic.com/2014/10/27/cloud-foundry-java-buildpack-new-relic-2/"&gt;guest post for New Relic on the 1-click deployment experience to setup New Relic on a Cloud Foundry based application&lt;/a&gt;. Definitely worth a read! If you want a look at what New Relic means for Spring developers, may I humbly recommend &lt;a href="http://www.youtube.com/watch?v=ixnlDL6wli4"&gt;this webinar that New Relic's Ashly Puls and I did earlier this year&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;Recently, community member Marc Schipperheyn opened up a &lt;a href="http://jira.spring.io/browse/SPR-12266"&gt;JIRA seeking guidance of the role of Spring in modern single-page application-style web applications&lt;/a&gt;. The ensuing discussion is &lt;em&gt;very&lt;/em&gt; illuminating for numerous reasons besides that it'll inspire changes in our documentation! Check it out and your $02.00 if you've got it to contribute!&lt;/li&gt;
&lt;li&gt;Our pal Petri Kainulainen  put together a nice &lt;a href="http://www.petrikainulainen.net/programming/spring-framework/spring-from-the-trenches-resetting-auto-increment-columns-before-each-test-method/"&gt;post on resetting auto-increment columns before Spring-based unit tests&lt;/a&gt;&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;Our pal Rafal Borowiec is back at it again, this time with a post that looks at how to &lt;a href="http://www.javacodegeeks.com/2014/10/spring-boot-actuator-custom-endpoint-with-mvc-layer-on-top-of-it.html"&gt;create Spring Boot actuator endpoints&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Are you using Apache Camel? Did you know that it &lt;a href="http://camel.apache.org/spring-boot.html"&gt;now provides a Spring Boot-based auto-configuration&lt;/a&gt;? &lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>A quality @Qualifier</title>
    <link rel="alternate" href="https://spring.io/blog/2014/11/04/a-quality-qualifier" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2014-11-04:1808</id>
    <updated>2014-11-04T11:52:00Z</updated>
    <content type="html">&lt;p&gt;Sometimes,  &lt;em&gt;teh  Twitterz&lt;/em&gt; is an amazing place. Just last week I spent some time helping clarify the behavior of Spring's &lt;code&gt;@Qualifier&lt;/code&gt;  annotation, which is both older than JSR 330 &lt;em&gt;and&lt;/em&gt; offers a  richer superset of JSR 330's &lt;code&gt;@Qualifier&lt;/code&gt; annotation.  These misguided few seemed to be under the impression that Spring's annotation didn't offer the same degree of type-safety as the JSR 330 annotation. I don't know if it's because they simply hadn't read up on the support (which is fairly new, since it's only been around since 2007), or if it's because they work for companies that make their money if you stop using Spring, but either way it was an excellent opportunity for a refresher! &lt;/p&gt;

&lt;p&gt;The qualifier annotation helps disambiguate bean references when Spring would otherwise not be able to do so. Spring's XML configuration supports a version of this, but without the type-safety, of course. We'll focus in this example on using Java configuration and component-scanning to register beans. As more people move to Spring's 8-year old Java configuration style this question seems to more frequently come up. Spring Boot is a Java configuration-first approach to building applications, and this technique may just come in handy in a pinch in a larger application based on Spring Boot.  &lt;/p&gt;

&lt;p&gt;It's use is simple. Suppose you have two beans that implement the &lt;code&gt;MarketPlace&lt;/code&gt; interface. If you declare  an array of &lt;code&gt;MarketPlace&lt;/code&gt;s - then Spring will provide all beans that implement that interface:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;@&lt;span class="kt"&gt;Autowired&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;MarketPlace&lt;/span&gt;[] marketPlaces; &lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you want to inject just one, you need to disambiguate the references. You can, in the simple case, just do so by bean ID: &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;@&lt;span class="kt"&gt;Autowired&lt;/span&gt; 
@Qualifier( &lt;span class="s2"&gt;"ios"&lt;/span&gt;) &lt;span class="c1"&gt;// the use is unique to Spring. It's darned convenient, too!&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;MarketPlace&lt;/span&gt; marketPlace ;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This assumes you've elsewhere defined a bean whose ID is &lt;code&gt;ios&lt;/code&gt;. This use is unique to Spring. You can  also  use &lt;code&gt;@Qualifier&lt;/code&gt; to create a type-safe binding that links the bean definition to the injection site by the qualities of the qualifier annotation. Here's an example based on pureplay Spring annotations:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="k"&gt;spring&lt;/span&gt;;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="k"&gt;org.springframework.beans.factory.annotation.Autowired&lt;/span&gt;;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="k"&gt;org.springframework.beans.factory.annotation.Qualifier&lt;/span&gt;;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="k"&gt;org.springframework.context.annotation.AnnotationConfigApplicationContext&lt;/span&gt;;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="k"&gt;org.springframework.context.annotation.ComponentScan&lt;/span&gt;;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="k"&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="k"&gt;org.springframework.stereotype.Component&lt;/span&gt;;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="k"&gt;javax.annotation.PostConstruct&lt;/span&gt;;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="k"&gt;java.lang.annotation.ElementType&lt;/span&gt;;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="k"&gt;java.lang.annotation.Retention&lt;/span&gt;;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="k"&gt;java.lang.annotation.RetentionPolicy&lt;/span&gt;;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="k"&gt;java.lang.annotation.Target&lt;/span&gt;;

&lt;span class="k"&gt;import static&lt;/span&gt; &lt;span class="k"&gt;spring.Spring.Platform&lt;/span&gt;;

@&lt;span class="kt"&gt;Configuration&lt;/span&gt;
@&lt;span class="kt"&gt;ComponentScan&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Spring&lt;/span&gt; {

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;(&lt;span class="kt"&gt;String&lt;/span&gt;[] &lt;span class="nv"&gt;args&lt;/span&gt;) {
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;AnnotationConfigApplicationContext&lt;/span&gt;(&lt;span class="kt"&gt;Spring&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;class);
    }

    &lt;span class="kt"&gt;@Autowired&lt;/span&gt;
    &lt;span class="kt"&gt;@Platform&lt;/span&gt;(&lt;span class="kt"&gt;Platform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;OperatingSystems&lt;/span&gt;&lt;span class="no"&gt;&lt;span class="o"&gt;.&lt;/span&gt;ANDROID&lt;/span&gt;)
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;MarketPlace&lt;/span&gt; android;

    &lt;span class="kt"&gt;@Autowired&lt;/span&gt;
    &lt;span class="kt"&gt;@Platform&lt;/span&gt;(&lt;span class="kt"&gt;Platform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;OperatingSystems&lt;/span&gt;&lt;span class="no"&gt;&lt;span class="o"&gt;.&lt;/span&gt;IOS&lt;/span&gt;)
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;MarketPlace&lt;/span&gt; ios;

    &lt;span class="kt"&gt;@PostConstruct&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;qualifyTheTweets&lt;/span&gt;() {
        &lt;span class="kt"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;out&lt;span class="o"&gt;.&lt;/span&gt;println(&lt;span class="s2"&gt;"ios:"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;ios);
        &lt;span class="kt"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;out&lt;span class="o"&gt;.&lt;/span&gt;println(&lt;span class="s2"&gt;"android:"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;android);
    }

    &lt;span class="c1"&gt;// the type has to be public!&lt;/span&gt;
    &lt;span class="kt"&gt;@Target&lt;/span&gt;({&lt;span class="kt"&gt;ElementType&lt;/span&gt;&lt;span class="no"&gt;&lt;span class="o"&gt;.&lt;/span&gt;FIELD&lt;/span&gt;,
            &lt;span class="kt"&gt;ElementType&lt;/span&gt;&lt;span class="no"&gt;&lt;span class="o"&gt;.&lt;/span&gt;METHOD&lt;/span&gt;,
            &lt;span class="kt"&gt;ElementType&lt;/span&gt;&lt;span class="no"&gt;&lt;span class="o"&gt;.&lt;/span&gt;TYPE&lt;/span&gt;,
            &lt;span class="kt"&gt;ElementType&lt;/span&gt;&lt;span class="no"&gt;&lt;span class="o"&gt;.&lt;/span&gt;PARAMETER&lt;/span&gt;})
    &lt;span class="kt"&gt;@Retention&lt;/span&gt;(&lt;span class="kt"&gt;RetentionPolicy&lt;/span&gt;&lt;span class="no"&gt;&lt;span class="o"&gt;.&lt;/span&gt;RUNTIME&lt;/span&gt;)
    &lt;span class="kt"&gt;@Qualifier&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;Platform&lt;/span&gt; {

        &lt;span class="kt"&gt;OperatingSystems&lt;/span&gt; &lt;span class="nf"&gt;value&lt;/span&gt;();

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="nc"&gt;OperatingSystems&lt;/span&gt; {
            &lt;span class="no"&gt;IOS&lt;/span&gt;,
            &lt;span class="no"&gt;ANDROID&lt;/span&gt;
        }
    }
}

&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MarketPlace&lt;/span&gt; {
}

@&lt;span class="kt"&gt;Component&lt;/span&gt;
@Platform(&lt;span class="kt"&gt;Platform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;OperatingSystems&lt;/span&gt;&lt;span class="no"&gt;&lt;span class="o"&gt;.&lt;/span&gt;IOS&lt;/span&gt;)
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AppleMarketPlace&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="no"&gt;MarketPlace&lt;/span&gt; {

    &lt;span class="kt"&gt;@Override&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;toString&lt;/span&gt;() {
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"apple"&lt;/span&gt;;
    }
}

@&lt;span class="kt"&gt;Component&lt;/span&gt;
@Platform(&lt;span class="kt"&gt;Platform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;OperatingSystems&lt;/span&gt;&lt;span class="no"&gt;&lt;span class="o"&gt;.&lt;/span&gt;ANDROID&lt;/span&gt;)
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GoogleMarketPlace&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="no"&gt;MarketPlace&lt;/span&gt; {

    &lt;span class="kt"&gt;@Override&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;toString&lt;/span&gt;() {
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"android"&lt;/span&gt;;
    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To compile and run this example, make sure you have &lt;code&gt;org.springframework.boot:spring-boot-starter:1.1.8.RELEASE&lt;/code&gt; on the CLASSPATH.&lt;/p&gt;

&lt;p&gt;This example shows the definition of two &lt;code&gt;MarketPlace&lt;/code&gt; implementations, one for &lt;code&gt;GoogleMarketPlace&lt;/code&gt; and one for the &lt;code&gt;AppleMarketPlace&lt;/code&gt;. We define an annotation &lt;code&gt;@Platform&lt;/code&gt; that takes a parameter of type &lt;code&gt;Platform.OperatingSystems&lt;/code&gt;. This annotation is itself annotated with &lt;code&gt;@Qualifier&lt;/code&gt; which tells Spring to treat it as a qualifier. The bean definitions are annotated accordingly: the &lt;code&gt;GoogleMarketPlace&lt;/code&gt; is annotated with &lt;code&gt;@Platform(Platform.OperatingSystems.ANDROID)&lt;/code&gt; and the &lt;code&gt;AppleMarketPlace&lt;/code&gt; is annotated with &lt;code&gt;@Platform(Platform.OperatingSystems.IOS)&lt;/code&gt;. Injecting either one (in the &lt;code&gt;Spring&lt;/code&gt; class) then becomes as simple as using the &lt;code&gt;@Qualifier&lt;/code&gt; annotation at the injection site. I'm using field injection here, though this is just a scratchpad to flesh things out. Obviously, in any sort of &lt;em&gt;real&lt;/em&gt; code you should prefer constructor and setter injection. &lt;/p&gt;

&lt;p&gt;Spring natively supports JSR 330, as well. After all, we did help lead that initiative. Here's the equivalent example using JSR 330 alternatives. &lt;code&gt;@Component&lt;/code&gt; becomes &lt;code&gt;@Named&lt;/code&gt;, &lt;code&gt;@Autowired&lt;/code&gt; becomes &lt;code&gt;@Inject&lt;/code&gt; and &lt;code&gt;@Qualifier&lt;/code&gt; becomes &lt;code&gt;@javax.inject.Qualifier&lt;/code&gt;, but otherwise this should look very familiar.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="k"&gt;jsr330&lt;/span&gt;;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="k"&gt;org.springframework.context.annotation.AnnotationConfigApplicationContext&lt;/span&gt;;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="k"&gt;org.springframework.context.annotation.ComponentScan&lt;/span&gt;;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="k"&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="k"&gt;javax.annotation.PostConstruct&lt;/span&gt;;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="k"&gt;javax.inject.Inject&lt;/span&gt;;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="k"&gt;javax.inject.Named&lt;/span&gt;;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="k"&gt;java.lang.annotation.ElementType&lt;/span&gt;;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="k"&gt;java.lang.annotation.Retention&lt;/span&gt;;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="k"&gt;java.lang.annotation.RetentionPolicy&lt;/span&gt;;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="k"&gt;java.lang.annotation.Target&lt;/span&gt;;

&lt;span class="k"&gt;import static&lt;/span&gt; &lt;span class="k"&gt;jsr330.Jsr330.Platform&lt;/span&gt;;

@&lt;span class="kt"&gt;Configuration&lt;/span&gt;
@&lt;span class="kt"&gt;ComponentScan&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Jsr330&lt;/span&gt; {

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;(&lt;span class="kt"&gt;String&lt;/span&gt;[] &lt;span class="nv"&gt;args&lt;/span&gt;) {
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;AnnotationConfigApplicationContext&lt;/span&gt;(&lt;span class="kt"&gt;Jsr330&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;class);
    }

    &lt;span class="kt"&gt;@Inject&lt;/span&gt;
    &lt;span class="kt"&gt;@Platform&lt;/span&gt;(&lt;span class="kt"&gt;Platform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;OperatingSystems&lt;/span&gt;&lt;span class="no"&gt;&lt;span class="o"&gt;.&lt;/span&gt;ANDROID&lt;/span&gt;)
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;MarketPlace&lt;/span&gt; android;

    &lt;span class="kt"&gt;@Inject&lt;/span&gt;
    &lt;span class="kt"&gt;@Platform&lt;/span&gt;(&lt;span class="kt"&gt;Platform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;OperatingSystems&lt;/span&gt;&lt;span class="no"&gt;&lt;span class="o"&gt;.&lt;/span&gt;IOS&lt;/span&gt;)
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;MarketPlace&lt;/span&gt; ios;

    &lt;span class="kt"&gt;@PostConstruct&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;qualifyTheTweets&lt;/span&gt;() {
        &lt;span class="kt"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;out&lt;span class="o"&gt;.&lt;/span&gt;println(&lt;span class="s2"&gt;"ios:"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;ios);
        &lt;span class="kt"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;out&lt;span class="o"&gt;.&lt;/span&gt;println(&lt;span class="s2"&gt;"android:"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;android);
    }

    &lt;span class="c1"&gt;// the type has to be public!&lt;/span&gt;
    &lt;span class="kt"&gt;@Target&lt;/span&gt;({&lt;span class="kt"&gt;ElementType&lt;/span&gt;&lt;span class="no"&gt;&lt;span class="o"&gt;.&lt;/span&gt;FIELD&lt;/span&gt;,
            &lt;span class="kt"&gt;ElementType&lt;/span&gt;&lt;span class="no"&gt;&lt;span class="o"&gt;.&lt;/span&gt;METHOD&lt;/span&gt;,
            &lt;span class="kt"&gt;ElementType&lt;/span&gt;&lt;span class="no"&gt;&lt;span class="o"&gt;.&lt;/span&gt;TYPE&lt;/span&gt;,
            &lt;span class="kt"&gt;ElementType&lt;/span&gt;&lt;span class="no"&gt;&lt;span class="o"&gt;.&lt;/span&gt;PARAMETER&lt;/span&gt;})
    &lt;span class="kt"&gt;@Retention&lt;/span&gt;(&lt;span class="kt"&gt;RetentionPolicy&lt;/span&gt;&lt;span class="no"&gt;&lt;span class="o"&gt;.&lt;/span&gt;RUNTIME&lt;/span&gt;)
    &lt;span class="kt"&gt;@javax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;inject&lt;span class="o"&gt;.&lt;/span&gt;Qualifier&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;Platform&lt;/span&gt; {

        &lt;span class="kt"&gt;OperatingSystems&lt;/span&gt; &lt;span class="nf"&gt;value&lt;/span&gt;();

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="nc"&gt;OperatingSystems&lt;/span&gt; {
            &lt;span class="no"&gt;IOS&lt;/span&gt;,
            &lt;span class="no"&gt;ANDROID&lt;/span&gt;
        }
    }
}

&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MarketPlace&lt;/span&gt; {
}

@&lt;span class="kt"&gt;Named&lt;/span&gt;
@Platform(&lt;span class="kt"&gt;Platform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;OperatingSystems&lt;/span&gt;&lt;span class="no"&gt;&lt;span class="o"&gt;.&lt;/span&gt;IOS&lt;/span&gt;)
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AppleMarketPlace&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="no"&gt;MarketPlace&lt;/span&gt; {

    &lt;span class="kt"&gt;@Override&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;toString&lt;/span&gt;() {
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"apple"&lt;/span&gt;;
    }
}

@&lt;span class="kt"&gt;Named&lt;/span&gt;
@Platform(&lt;span class="kt"&gt;Platform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;OperatingSystems&lt;/span&gt;&lt;span class="no"&gt;&lt;span class="o"&gt;.&lt;/span&gt;ANDROID&lt;/span&gt;)
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GoogleMarketPlace&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="no"&gt;MarketPlace&lt;/span&gt; {

    &lt;span class="kt"&gt;@Override&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;toString&lt;/span&gt;() {
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"android"&lt;/span&gt;;
    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To compile and run this example, make sure you have &lt;code&gt;org.springframework.boot:spring-boot-starter:1.1.8.RELEASE&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code&gt;javax.inject:javax.inject:1&lt;/code&gt; on the CLASSPATH.&lt;/p&gt;

&lt;p&gt;Is any of this new? No. That's the point. This has been possible since Spring 2.5 (which we released in 2007). It's surprising that people still don't know about this functionality, but hopefully this blog makes it easier for people to get started. As a next step, &lt;a href="http://docs.spring.io/spring/docs/2.5.x/reference/beans.html#beans-autowired-annotation-qualifiers"&gt;check out the documentation (from 2.5 onwards!)&lt;/a&gt; which covers every gory detail - including the XML alternative - in depth!&lt;/p&gt;

&lt;p&gt;I should mention that - in practice - I haven't needed to do this a lot in my code. Maybe a dozen times in the last 7 years. It can be handy, though! &lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Webinar Replay: Building “Bootful” UIs with Spring Boot and Vaadin</title>
    <link rel="alternate" href="https://spring.io/blog/2014/11/04/webinar-replay-building-bootful-uis-with-spring-boot-and-vaadin" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2014-11-04:1810</id>
    <updated>2014-11-04T09:09:00Z</updated>
    <content type="html">&lt;p&gt;Speaker: Josh Long, Pivotal and Peter Lehto, Vaadin &lt;/p&gt;

&lt;p&gt;It's been a long day, but you've done it: you've got a Spring Boot powered backend and now you need to build the UI that'll power the workforce and deliver next week. Vaadin, a UI framework that marries the ease of use of server-side Java and the rich, dynamic nature of client-side JavaScript, integrates well with Spring Boot and offers UI polish that would be hard to secure any other way. Join Spring developer advocate Josh Long and Vaadin evangelists for a look at how Vaadin and Spring Boot can get you to production quicker, and easier.&lt;/p&gt;

&lt;p&gt;Learn more about Spring Boot &lt;a href="http://projects.spring.io/spring-boot"&gt;http://projects.spring.io/spring-boot&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn more about Vaadin &lt;a href="http://www.vaadin.com"&gt;http://www.vaadin.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;iframe width="420" height="315" src="//www.youtube.com/embed/PngL2OJAOfk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>Spring Data Evans SR1 released</title>
    <link rel="alternate" href="https://spring.io/blog/2014/11/03/spring-data-evans-sr1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Christoph Strobl</name>
    </author>
    <id>tag:spring.io,2014-11-03:1807</id>
    <updated>2014-11-03T13:08:00Z</updated>
    <content type="html">&lt;p&gt;On behalf of the Spring Data team I am pleased to announce the availability of the first service release of the Evans release train. The team around the participating modules completed &lt;a href="http://jira.spring.io/issues/?filter=14836"&gt;41 issues&lt;/a&gt; including serveral bug fixes. We want to thank everyone for taking the time to report, volunteer fixing and testing those issues - this is invaluable feedback we could not do without!&lt;/p&gt;

&lt;p&gt;The release includes the following 11 modules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spring Data Commons 1.9.1 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-commons/1.9.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.9.1.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.9.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.9.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Spring Data JPA 1.7.1 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-jpa/1.7.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.7.1.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.7.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.7.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Spring Data MongoDB 1.6.1 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-mongodb/1.6.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.6.1.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.6.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.6.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Spring Data Neo4j 3.2.1 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-neo4j/3.2.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/3.2.1.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/3.2.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/3.2.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Spring Data Solr 1.3.1 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-solr/1.3.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/1.3.1.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/1.3.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/1.3.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Spring Data Couchbase 1.2.1 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-couchbase/1.2.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/1.2.1.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/1.2.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/1.2.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Spring Data Cassandra 1.1.1 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-cassandra/1.1.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.1.1.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.1.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.1.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Spring Data Elasticsearch 1.1.1 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-elasticsearch/1.1.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.1.1.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.1.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.1.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Spring Data Gemfire 1.5.1 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-gemfire/1.5.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.5.1.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.5.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.5.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Spring Data Redis 1.4.1 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-redis/1.4.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.4.1.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.4.1.RELEASE/reference/pdf/spring-data-redis-reference.pdf"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.4.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Spring Data REST 2.2.1 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-rest-webmvc/2.2.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.2.1.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.2.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.2.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Evans SR 1 is a recommended upgrade as it contains important bug fixes. Dijkstra users still on a service release are encouraged to upgrade as well. The next release coming will be the first milestone of release train &lt;a href="https://github.com/spring-projects/spring-data-commons/wiki/Release-Train-Fowler"&gt;Fowler&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;In case you happen to be in London this week, don't miss the oportunity to meet us at &lt;a href="https://skillsmatter.com/conferences/1941-spring-exchange-2014"&gt;Spring eXchange 2014&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring for Apache Hadoop 2.0.3 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2014/11/03/spring-for-apache-hadoop-2-0-3-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Thomas Risberg</name>
    </author>
    <id>tag:spring.io,2014-10-31:1806</id>
    <updated>2014-11-03T10:36:00Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce that Spring for Apache Hadoop 2.0.3 has just been released and is now available from Maven Central and the Spring Repository. This release includes some bug fixes and updates some dependency versions. The dependencies are updated to match the next 1.0.3 release of the Spring IO platform. More details can be found in the &lt;a href="http://docs.spring.io/spring-hadoop/docs/2.0.3.RELEASE/changelog.txt"&gt;changelog&lt;/a&gt; or in the &lt;a href="https://jira.spring.io/secure/ReleaseNote.jspa?projectId=10801&amp;amp;version=14702"&gt;JIRA release notes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this release, we are adding support for Apache Hadoop 2.5.1 (hadoop25) and Pivotal HD 2.1 (phd21). &lt;/p&gt;

&lt;p&gt;Here is a complete list of the latest version designation to use for the various  distro "flavors" published. The Apache Hadoop releases are available in Maven Central and all other releases are available in the &lt;a href="http://repo.spring.io/libs-release/"&gt;Spring Repository&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2.0.3.RELEASE - Apache Hadoop 2.2.x [2.2.0]&lt;/li&gt;
&lt;li&gt;2.0.3.RELEASE-hadoop12 - Apache Hadoop 1.2.x [1.2.1]&lt;/li&gt;
&lt;li&gt;2.0.3.RELEASE-hadoop24 - Apache Hadoop 2.4.x [2.4.1]&lt;/li&gt;
&lt;li&gt;2.0.3.RELEASE-hadoop25 - Apache Hadoop 2.5.x [2.5.1]&lt;/li&gt;
&lt;li&gt;2.0.3.RELEASE-phd1 - Pivotal HD 1.1 [2.0.5-alpha-gphd-2.1.0.0]&lt;/li&gt;
&lt;li&gt;2.0.3.RELEASE-phd20 - Pivotal HD 2.0 [2.2.0-gphd-3.0.1.0]&lt;/li&gt;
&lt;li&gt;2.0.3.RELEASE-phd21 - Pivotal HD 2.1 [2.2.0-gphd-3.1.0.0]&lt;/li&gt;
&lt;li&gt;2.0.3.RELEASE-cdh4 - Cloudera CDH4 MR1 [2.0.0-mr1-cdh4.6.0]&lt;/li&gt;
&lt;li&gt;2.0.3.RELEASE-cdh5 - Cloudera CDH5 YARN [2.3.0-cdh5.1.3]&lt;/li&gt;
&lt;li&gt;2.0.3.RELEASE-hdp13 - Hortonworks Data Platform 1.3 [1.2.0]&lt;/li&gt;
&lt;li&gt;2.0.3.RELEASE-hdp20 - Hortonworks Data Platform 2.0 [2.2.0]&lt;/li&gt;
&lt;li&gt;2.0.3.RELEASE-hdp21 - Hortonworks Data Platform 2.1 [2.4.0]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We plan on adding support for Apache Hadoop 2.6, Hortonworks HDP 2.2 and Cloudera CDH 5.2 in a future release.&lt;/p&gt;

&lt;p&gt;The project page is at - &lt;a href="http://projects.spring.io/spring-hadoop/"&gt;http://projects.spring.io/spring-hadoop/&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Integration Java DSL 1.0 RC1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/31/spring-integration-java-dsl-1-0-rc1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Artem Bilan</name>
    </author>
    <id>tag:spring.io,2014-10-31:1805</id>
    <updated>2014-10-31T19:33:14Z</updated>
    <content type="html">&lt;p&gt;Dear Spring community,&lt;/p&gt;

&lt;p&gt;We are pleased to announce that soon after the
&lt;a href="https://spring.io/blog/2014/10/27/spring-integration-4-1-rc1-released"&gt;Spring Integration 4.1 Release Candidate&lt;/a&gt;
the Spring Integration Java DSL 1.0 Release Candidate is now available.
Please use the &lt;a href="http://repo.springsource.org/milestone"&gt;Milestone Repository&lt;/a&gt; with Maven or Gradle,
or download a
&lt;a href="http://repo.spring.io/milestone/org/springframework/integration/spring-integration-java-dsl/1.0.0.RC1"&gt;distribution archive&lt;/a&gt;,
to give it a spin.&lt;/p&gt;

&lt;p&gt;See the project &lt;a href="https://github.com/spring-projects/spring-integration-extensions/wiki/Spring-Integration-Java-DSL-Reference"&gt;home page&lt;/a&gt;
for more information.&lt;/p&gt;

&lt;p&gt;The release includes many new features and improvements, as well as a number of bug fixes. The GA release
is planned for the middle of November.&lt;/p&gt;

&lt;p&gt;Here is a summary of major changes since the
&lt;a href="https://spring.io/blog/2014/09/07/spring-integration-java-dsl-1-0-milestone-3-available"&gt;last milestone&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Refactoring and Breaking Changes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While still supporting earlier Java versions, the Spring Integration Java DSL is primarily positioned for Java 8 and its Lambda support.
We have removed several
&lt;code&gt;functional interfaces&lt;/code&gt; in favor of similar interfaces from Java 8: &lt;code&gt;Consumer&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Function&amp;lt;T, R&amp;gt;&lt;/code&gt; etc. Of course, to support
backward compatibility with older Java version we have implemented similar interfaces in the DSL source code. Users that
are using the changed interfaces with with Java versions less than 8 will need to make changes to fix their compilation errors. For example:&lt;/p&gt;

&lt;p&gt;From this:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;handle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;EndpointConfigurer&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;GenericEndpointSpec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ServiceActivatingHandler&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="nd"&gt;@Override&lt;/span&gt;
                &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GenericEndpointSpec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ServiceActivatingHandler&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;poller&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pollers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cron&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"7 * * * * ?"&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To this:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;handle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Consumer&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;GenericEndpointSpec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ServiceActivatingHandler&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="nd"&gt;@Override&lt;/span&gt;
                &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GenericEndpointSpec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ServiceActivatingHandler&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;poller&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pollers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cron&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"7 * * * * ?"&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course if you use a Java 8 Lambda here, the code will not require changes:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;handle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;poller&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pollers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cron&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"7 * * * * ?"&lt;/span&gt;&lt;span class="o"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;IntegrationFlows&lt;/code&gt; now contains only &lt;code&gt;from(...)&lt;/code&gt; methods. the &lt;code&gt;.fromFixedMessageChannel()&lt;/code&gt; has been replaced with
&lt;code&gt;.from(String messageChannelName, boolean fixedSubscriber)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In addition, to fix some package tangle issues, we have moved some classes to different packages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Method Scope Functions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To simplify the code completion from an IDE and allow avoiding redundant searches for a desired &lt;code&gt;Namespace Factory&lt;/code&gt; we
added overloaded methods with &lt;code&gt;Function&amp;lt;T, R&amp;gt;&lt;/code&gt; argument. For example these code snippets are equal:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="o"&gt;.....&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Amqp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pollableChannel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;rabbitConnectionFactory&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;queueName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"amqpReplyChannel"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;channelTransacted&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;....&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;amqpPollable&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;rabbitConnectionFactory&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;queueName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"amqpReplyChannel"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;channelTransacted&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;....&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Where the &lt;code&gt;c&lt;/code&gt; variable is the &lt;code&gt;Channel&lt;/code&gt;'s "method-aggregator" object, which delegates to the appropriate &lt;code&gt;Namespace Factory&lt;/code&gt;.
Other similar Lambda methods are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IntegrationFlows.from(MessageSourcesFunction sources)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IntegrationFlows.from(MessageProducersFunction producers)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IntegrationFlows.from(MessagingGatewaysFunction gateways)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IntegrationFlowDefinition.handleWithAdapter(Function&amp;lt;Adapters, MessageHandlerSpec&amp;lt;?, H&amp;gt;&amp;gt; adapters)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EndpointSpec.poller(Function&amp;lt;PollerFactory, PollerSpec&amp;gt; pollers)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;FunctionExpression&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Spring Integration has amazing Spring Expression Language (SpEL) support. Since the Java DSL is
pure (eh!) Java, it does not really make sense to specify some business logic in a long String for an &lt;code&gt;expression&lt;/code&gt; property.
Being inspired by Java 8 Lambda support, and pursuing the aim of minimal changes
we have introduced the &lt;code&gt;FunctionExpression&lt;/code&gt; - an implementation of the SpEL &lt;code&gt;Expression&lt;/code&gt; interface - which accepts a
&lt;code&gt;Function&amp;lt;T, R&amp;gt;&lt;/code&gt; and delegates to it on the each &lt;code&gt;getValue()&lt;/code&gt;. Now, many components in the DSL provide
&lt;code&gt;(Function&amp;lt;T, R&amp;gt; function)&lt;/code&gt; methods as an alternative to the similar SpEL method. Here is an example for the &lt;code&gt;localFilename&lt;/code&gt;
property for the &lt;code&gt;FtpInboundFileSynchronizingMessageSource&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;With SpEL:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@Bean&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IntegrationFlow&lt;/span&gt; &lt;span class="nf"&gt;ftpInboundFlow&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;IntegrationFlows&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ftp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ftpSessionFactory&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;remoteDirectory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ftpSource"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;localFilenameExpression&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"payload.toUpperCase() + '.a'"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ftpInboundResultChannel"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With Lambda:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@Bean&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IntegrationFlow&lt;/span&gt; &lt;span class="nf"&gt;ftpInboundFlow&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;IntegrationFlows&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ftp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ftpSessionFactory&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;remoteDirectory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ftpSource"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;localFilename&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toUpperCase&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;".a"&lt;/span&gt;&lt;span class="o"&gt;)))&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ftpInboundResultChannel"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Other interesting uses of the &lt;code&gt;FunctionExpression&lt;/code&gt; are the &lt;code&gt;Enricher&lt;/code&gt; and &lt;code&gt;HeaderEnricher&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;enrich&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;requestChannel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"enrichChannel"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;requestPayload&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;Message:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;getPayload&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;propertyFunction&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"date"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;()))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;FunctionExpression&lt;/code&gt; also supports runtime type conversion as is done in the standard &lt;code&gt;SpelExpression&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SubFlows&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have introduced &lt;code&gt;SubFlow&lt;/code&gt; support for some &lt;code&gt;if...else&lt;/code&gt; and &lt;code&gt;publish-subscribe&lt;/code&gt; components. The simplest
example is &lt;code&gt;.publishSubscribeChannel()&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@Bean&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IntegrationFlow&lt;/span&gt; &lt;span class="nf"&gt;subscribersFlow&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;flow&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;flow&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;publishSubscribeChannel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Executors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;newCachedThreadPool&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
                    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;subscribe&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;
                            &lt;span class="o"&gt;.&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"subscriber1Results"&lt;/span&gt;&lt;span class="o"&gt;)))&lt;/span&gt;
                    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;subscribe&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;
                            &lt;span class="o"&gt;.&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"subscriber2Results"&lt;/span&gt;&lt;span class="o"&gt;))))&lt;/span&gt;
            &lt;span class="o"&gt;.&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"subscriber3Results"&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course the same result we can be achieved with separate &lt;code&gt;IntegrationFlow&lt;/code&gt; &lt;code&gt;@Bean&lt;/code&gt; definitions, but we hope you'll
find the subflow style of logic composition useful.&lt;/p&gt;

&lt;p&gt;Similar &lt;code&gt;publish-subscribe&lt;/code&gt; subflow composition is provided by &lt;code&gt;.routeToRecipients()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another example is &lt;code&gt;.discardFlow()&lt;/code&gt; instead of &lt;code&gt;.discardChannel()&lt;/code&gt; on &lt;code&gt;.filter()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.route()&lt;/code&gt; deserves special attention:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@Bean&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IntegrationFlow&lt;/span&gt; &lt;span class="nf"&gt;routeFlow&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;
            &lt;span class="o"&gt;.&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;channelMapping&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"evenChannel"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;subFlowMapping&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sf&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
                                    &lt;span class="n"&gt;sf&lt;/span&gt;&lt;span class="o"&gt;.&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)))&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;Object:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"oddChannel"&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;.channelMapping()&lt;/code&gt; continues to work as in regular &lt;code&gt;Router&lt;/code&gt; mapping, but the &lt;code&gt;.subFlowMapping()&lt;/code&gt; tied that
subflow with main flow. In other words, any router's subflow returns to the main flow after &lt;code&gt;.route()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Similar "return-to-main-flow" subflow is supported by &lt;code&gt;.gateway()&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@Bean&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IntegrationFlow&lt;/span&gt; &lt;span class="nf"&gt;gatewayFlow&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; 
                   &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gateway&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"gatewayRequest"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;errorChannel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"gatewayError"&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;replyTimeout&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10L&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gateway&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gf&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;gf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"From Gateway SubFlow: "&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However this Gateway SubFlow is just wired with main flow through the explicit &lt;code&gt;DirectChannel&lt;/code&gt; and wrapped to
the regular &lt;code&gt;GatewayMessageHandler&lt;/code&gt; using that channel as a &lt;code&gt;requestChannel&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;Of course, subflows can be nested with any depth, but we don't recommend to do that because, in fact, even in the
router case, adding complex subflows within a flow would quickly begin to be
difficult for a human to parse.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We haven't added more &lt;code&gt;protocol specific adapters&lt;/code&gt; since the last milestone. Not all adapters will be supported directly by the DSL
although the most commonly used ones have first class support.
However, those that don't have first class support can easily be wired in using &lt;code&gt;.handle()&lt;/code&gt;. As we have discussed previously,
we are looking for input to prioritize the implementations of the remaining adapters
so, don't be shy to share your thoughts and ideas!&lt;/p&gt;

&lt;p&gt;You can obtain more information about these and existing classes from their
&lt;a href="https://github.com/spring-projects/spring-integration-extensions/tree/master/spring-integration-java-dsl"&gt;source code&lt;/a&gt;
and from &lt;a href="https://github.com/spring-projects/spring-integration-extensions/wiki/Spring-Integration-Java-DSL-Reference"&gt;Reference Manual&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We look forward to your comments and feedback (&lt;a href="http://stackoverflow.com"&gt;StackOverflow&lt;/a&gt; (&lt;code&gt;spring-integration&lt;/code&gt; tag),
&lt;a href="https://jira.spring.io/browse/INTEXT"&gt;Spring JIRA&lt;/a&gt;, &lt;a href="https://github.com/spring-projects/spring-integration-extensions/issues"&gt;GitHub&lt;/a&gt;)
as soon as possible and report issues you find before we GA towards over a couple weeks.&lt;/p&gt;

&lt;p&gt;As always, we very much welcome &lt;a href="https://github.com/spring-projects/spring-integration/blob/master/CONTRIBUTING.md"&gt;contributions&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Webinar Replay: Content-enabled Web and Mobile Applications with Spring, Groovy and Crafter</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/30/webinar-replay-content-enabled-web-and-mobile-applications-with-spring-groovy-and-crafter" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2014-10-30:1804</id>
    <updated>2014-10-30T14:49:00Z</updated>
    <content type="html">&lt;p&gt;Conquering Content-enabled Web and Mobile Applications with Spring and Groovy&lt;/p&gt;

&lt;p&gt;Speaker: Russ Danner - Crafter Software &lt;/p&gt;

&lt;p&gt; Rich media and digital content are an integral part of nearly all Web and mobile applications today, but the growing number of platforms, changing business demands and time to market are a major concern. Join this session to learn modern practices for building content-enabled Web and mobile apps. We will uncover common challenges faced by content and application teams, explain how these problems are solved by simple, powerful tools and the right architecture. We'll also demonstrate how leading organizations such as AT&amp;amp;T, Marriott, and Harvard Business Publishing have succeeded by leveraging Spring Framework, Groovy and other leading Java development technologies along with content management frameworks to build and manage content rich applications.&lt;/p&gt;

&lt;p&gt;Learn more about Crafter Software &lt;a href="http://www.craftersoftware.com"&gt;http://www.craftersoftware.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;iframe width="420" height="315" src="//www.youtube.com/embed/KTClU47MGdI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>Pivotal at Spring eXchange 2014 in London, UK</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/29/pivotal-at-spring-exchange-2014-in-london-uk" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2014-10-29:1802</id>
    <updated>2014-10-29T12:25:00Z</updated>
    <content type="html">&lt;p&gt;Are you heading to Spring eXchange in London over November 6th-7th? &lt;/p&gt;

&lt;p&gt;In just under a week, Spring experts will join hundreds of Spring enthusiasts for two days of learning and sharing skills in Spring. &lt;a href="https://skillsmatter.com/conferences/1941-spring-exchange-2014#program"&gt;Topics covered&lt;/a&gt; will include Big Data and Spring XD, Spring Data, REST, and microservices and modern architecture. There will be a strong presence of Pivotal experts, amongst a star-studded line-up. See below for some Pivotal speakers and talks to look out for.&lt;/p&gt;

&lt;p&gt; Head to the&lt;a href="https://skillsmatter.com/conferences/1941-spring-exchange-2014#program"&gt; programme page for more details and the complete speaker list.&lt;/a&gt; To book your place and guarantee a seat, head to the &lt;a href="https://skillsmatter.com/checkout/login?event_id=1941-spring-exchange-2014"&gt;booking page here&lt;/a&gt;. Pivotal is sponsoring Spring eXchange, so reach out to us on Twitter &lt;a href="https://www.twitter.com/springcentral"&gt;@springcentral&lt;/a&gt;  #springx to get in touch during the conference! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SPECIAL OFFER&lt;/strong&gt; for &lt;a href="http://www.meetup.com/Londonjavacommunity/"&gt;London Java Community&lt;/a&gt; members: Want to be a guest for our Pivotal Speakers at Spring eXchange 2014 and get a free ticket to the show? We will offer them to the first 15 LJC members who tweet us at &lt;a href="https://www.twitter.com/springcentral"&gt;@springcentral&lt;/a&gt; and &lt;a href="https://www.twitter.com/cloudfoundry"&gt;@cloudfoundry&lt;/a&gt; with the URL of a deployed Spring application on &lt;a href="http://run.pivotal.io"&gt;Pivotal Web Services&lt;/a&gt;. First come, first serve, we have 15 tickets for our 15 speakers! We will verify  winners by looking at the URL for the Spring app, and looking you up for membership in the London Java Community on meetup.com if you win, so make sure you have a meetup.com profile and are a member! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;THURSDAY - NOVEMBER 6, 2014&lt;/strong&gt;&lt;br&gt;
10:00 AM &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://skillsmatter.com/legacy_profile/dr-david-syer"&gt;Dr. David Syer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;What's New in Spring&lt;/li&gt;
  &lt;li&gt;In the opening Keynote of the Spring eXchange 2014, Dave Syer recounts the recent developments in the Spring ecosystem, going back about 12 months or so. Spring is fun again and all the cool kids all want to play with it since Spring Boot hit the streets in 2013. Looking at this in the context of Spring IO and Spring Cloud, Dave will also cover recent updates to Foundation projects like Spring 4.1 and 4.2, Spring Batch 3.0, Spring Integration 4.1 and Spring Data Evans, plus Execution layer projects like Spring XD for Big Data and Grails for full-stack web applications. You will be surprised and pleased to see how easy it is to build applications and services and to glue them together into distributed systems, especially if you haven't used Spring, or haven't seen it recently.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;10:45 AM &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://skillsmatter.com/legacy_profile/mark-pollack"&gt;Mark Pollack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Big Data, Little Time : Taking the Complexity out of creating Big Data applications &lt;/li&gt;
  &lt;li&gt;Creating Big Data applications is a relatively new art and developing a comprehensive solution can be challenging. Some of the key challenges arise from bringing together complex domains such as stream analysis, batch workflow orchestration and data import and export. Furthermore, building such applications normally requires stitching together disparate products. Spring XD is a new project that aims to tackle big data complexity. It builds upon proven Spring technologies to tie together these domains and provide a scalable, distributed, and fault-tolerant runtime environment. You do not need to be a Java developer to get started. A simple DSL lets you build complex stream and job definitions that includes the scoring of machine learning algorithms in just a few simple steps.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;
&lt;a href="https://skillsmatter.com/legacy_profile/brian-clozel"&gt;Brian Clozel&lt;/a&gt;, &lt;a href="https://skillsmatter.com/members/snicoll"&gt;Stephane Nicoll&lt;/a&gt;
&lt;/li&gt;
  &lt;li&gt;Getting started with Spring &lt;/li&gt;
  &lt;li&gt; Spring is much more than a single framework - it is a rich ecosystem with multiple projects, all helping to build modern applications. But all this can be a bit intimidating for Spring beginners. Stéphane Nicoll and Brian Clozel will walk you through the core concepts and thought model behind the Spring Framework; they’ll cover the main aspects of the Framework, but also introduce you to key features in other Spring projects, including the latest Spring IO platform. After this session, you’ll leave with a common approach for all Spring portfolio projects and all the keys to successfully start with Spring in 2014.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;12:00 PM&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
&lt;a href="https://skillsmatter.com/legacy_profile/stuart-williams"&gt;Stuart Williams&lt;/a&gt;&lt;a href="https://skillsmatter.com/members/snicoll"&gt;&lt;/a&gt;
&lt;/li&gt;
  &lt;li&gt;Asynchronous Design with Spring and RTI: 1M Events per Second &lt;/li&gt;
  &lt;li&gt;An application designer usually has to choose where to trade flexibility for specificity (and thus usually performance); knowing when and where to do so is an art and requires experience. This talk will share over a decades worth of experience making these decisions and the learnings from developing Pivotal's successful Real Time Intelligence (RTI) product using the latest versions of Spring projects: Integration, Data, Boot, MVC/REST and XD. A walk through the RTI architecture will provide the base for an explanation about how Spring performs at hundreds (and millions) of events/operations per second and the techniques that you can use right now in your own Spring applications to minimise resource utilisation and gain performance.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;
&lt;a href="https://skillsmatter.com/legacy_profile/josh-long"&gt;Josh Long&lt;/a&gt;&lt;a href="https://skillsmatter.com/members/snicoll"&gt;&lt;/a&gt;
&lt;/li&gt;
  &lt;li&gt;Building "Bootiful" Applications with Spring Boot &lt;/li&gt;
  &lt;li&gt;Alright, so maybe "bootiful" won't ever work, but I tried, and it was worth it too because you're reading this. Spring Boot, the new convention-over-configuration centric framework from the Spring team at Pivotal, marries Spring's flexibility with conventional, common sense defaults to make application development not just fly, but pleasant! Join Spring developer advocate Josh Long for a look at what Spring Boot is, why it's turning heads, why you should consider it for your next application (REST, web, batch, big-data, integration, whatever!) and how to get started.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2:00 PM&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://skillsmatter.com/legacy_profile/janne-valkealahti"&gt;Janne Valkealahti&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Asynchronous Design with Spring and RTI: 1M Events per Second &lt;/li&gt;
  &lt;li&gt;An application designer usually has to choose where to trade flexibility for specificity (and thus usually performance); knowing when and where to do so is an art and requires experience. This talk will share over a decades worth of experience making these decisions and the learnings from developing Pivotal's successful Real Time Intelligence (RTI) product using the latest versions of Spring projects: Integration, Data, Boot, MVC/REST and XD. A walk through the RTI architecture will provide the base for an explanation about how Spring performs at hundreds (and millions) of events/operations per second and the techniques that you can use right now in your own Spring applications to minimise resource utilisation and gain performance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3:15 PM&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://skillsmatter.com/legacy_profile/eric-bottard"&gt;Eric Bottard&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A guided tour to Spring XD internals &lt;/li&gt;
  &lt;li&gt;What happens when a Stream is deployed to a Spring XD cluster? How does Stream processing and data partitioning work? How does the cluster recover when a Spring XD container goes down? We'll cover all those topics and some more using live demos in this deep dive session about Spring XD&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://skillsmatter.com/legacy_profile/stphane-maldini"&gt;Stephane Maldini&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Reactive Micro-Services with Reactor &lt;/li&gt;
  &lt;li&gt;Micro Service Architecture is now becoming the standard for a large range of companies. Amid the problems to solve when building micro-services, developers might need to think asynchronous. Reactor offers a progressive and non opinionated concurrency handling to any JVM application — and beyond. Not only is it a handy lightweight toolkit, it is also part of the Reactive-Streams specification and as such is interoperable with friends such as RxJava or Akka. Come discover some tips and tricks when building micro-services on top of Reactor, understand how it builds on top of Reactive-Streams specification and why this is a game changer in today's software development.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;FRIDAY - NOVEMBER 7, 2014&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;11:15 AM &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://skillsmatter.com/legacy_profile/ben-hale"&gt;Ben Hale&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Designing REST-ful Micro-services with Spring Boot &lt;/li&gt;
  &lt;li&gt;As data-driven applications become ubiquitous, the services that provide the data are proliferating. As teams become responsible for more and more of these services, it becomes critical that they be designed and implemented in a way that is as lightweight as possible. This session will cover how to design micro-services as RESTful APIs and implement them with minimal code using Spring Boot. It will focus on API design using REST and HATEOAS, with live coding progressing all the way to a full-fledged app running in the cloud.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://skillsmatter.com/legacy_profile/josh-long"&gt;Josh Long&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Building "Bootiful" Applications with Spring Cloud &lt;/li&gt;
  &lt;li&gt;Alright, so maybe "bootiful" won't ever work, but I tried, and it was worth it too because you're reading this. Spring Boot, the new convention-over-configuration centric framework from the Spring team at Pivotal, marries Spring's flexibility with conventional, common sense defaults to make application development not just fly, but pleasant! Join Spring developer advocate Josh Long @starbuxman for a look at what Spring Boot is, why it's turning heads, why you should consider it for your next application (REST, web, batch, big-data, integration, whatever!) and how to get started. Let's take advantage of the dynamic nature of a virtual JUG: I will be live coding and (attempting to) answer your questions on all things Spring and Spring Boot as I introduce the technology. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;12:30 PM &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://skillsmatter.com/legacy_profile/oliver-gierke"&gt;Oliver Gierke&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST - Repositories meet Hypermedia &lt;/li&gt;
  &lt;li&gt;The Spring Data repository abstraction significantly eases implementing data access layers in Java. On top of that the REST module of the umbrella project provides a programming model to easily expose hypermedia-driven REST resources to interact with the repositories. The talk discusses the patterns Spring Data REST implements, how internet standards and specifications influence the design and how the modules exposes meta-data to build loosely coupled clients. The presentation contains a lot of hands on code samples to demonstrate the discussed aspects.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://skillsmatter.com/legacy_profile/brian-clozel"&gt;Brian Clozel&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Inside Spring.io: A production Spring Reference Application &lt;/li&gt;
  &lt;li&gt;Would you like to take a look inside the newly open-sourced reference application that powers the spring.io site? Then join Spring Guru Brian Clozel who will survey some of the features behind the harmonized platform. This talk will cover the following:     
    &lt;ul&gt;
      &lt;li&gt;Idiomatic use of Spring Boot     &lt;/li&gt;
      &lt;li&gt;Taking advantage of Spring Framework 4 features     &lt;/li&gt;
      &lt;li&gt;A tour of our JavaScript frontend using cujoJS's curl, Bower and Gulp for a clean and modular design     &lt;/li&gt;
      &lt;li&gt;Zero-downtime deployment to Cloud Foundry using blue/green deployments &lt;/li&gt;
      &lt;li&gt;Find out more about &lt;a href="https://github.com/spring-io/sagan"&gt;Spring.io&lt;/a&gt; here!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2:30 PM &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://skillsmatter.com/legacy_profile/thomas-darimont"&gt;Thomas Darimont&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;What's new in Spring Data? &lt;/li&gt;
  &lt;li&gt;This talk will give a broad overview of the new features introduced in the latest Spring Data release trains. We will cover recent additions and improvements in Spring Data Commons - the module that's shared amongst the store specific ones. We'll then delve into the latest and greatest features of individual store modules, like JPA, MongoDB, Neo4j, Solr and the community ones as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://skillsmatter.com/legacy_profile/andy-wilkinson"&gt;Andy Wilkinson&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Documenting RESTful APIs &lt;/li&gt;
  &lt;li&gt;An API's documentation is a vital part of making it easy to understand and easy to use. RESTful APIs are no different. In this talk we'll look at what should be included in your RESTful APIs documentation and, just as importantly, what should not be included. We'll look at a number of real-world examples of good and bad API documentation before considering a number of different approaches for producing documentation for a RESTful API built using Spring.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3:45 PM &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://skillsmatter.com/legacy_profile/christoph-strobl"&gt;Christoph Strobl&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Boot your search with Spring &lt;/li&gt;
  &lt;li&gt;Searching data has become mission critical in days of google. We want to find, not to search! This session focuses on solutions for integrating search into your application. We’ll have a look on Spring Data’s search abstraction for Apache Solr, Elasticsearch and Mongodb and do some hands on auto configuration using Spring Boot (100% XML free setup guaranteed). You choose the technology, Spring gives you tools to get going.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://skillsmatter.com/legacy_profile/rob-winch"&gt;Rob Winch&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The State of Securing RESTful APIs with Spring &lt;/li&gt;
  &lt;li&gt;Learn how to properly secure your RESTful endpoint, explore some common pitfalls when applying security to RESTful API and discover how the new features in Spring Security can greatly simplify securing your RESTful APIs. The many benefits of a RESTful architecture has made it the standard way in which to design web based APIs. For example, the principles of REST state that we should leverage standard HTTP verbs which helps to keep our APIs simple. Server components that are considered RESTFul should be stateless which help to ensure that they can easily scale. We can leverage caching to gain further performance and scalability benefits. However, the best practices of REST and security often seem to clash. How should a user be authenticated in a stateless application? How can a secured resource also support caching? Securing RESTful endpoints is further complicated by the the fact that security best practices evolve so rapidly. In this talk Rob will discuss how to properly secure your RESTful endpoints. Along the way we will explore some common pitfalls when applying security to RESTful APIs. Finally, we will see how the new features in Spring Security can greatly simplify securing your RESTful APIs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Save the date for SpringOne2GX 2015!  We hope you will mark your calendar and join  us again! SpringOne2GX 2015 will be held September 14 - 17, 2015 at the  Marriott Marquis in Washington DC.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - October 28, 2014</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/29/this-week-in-spring-october-28-2014" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2014-10-29:1800</id>
    <updated>2014-10-29T02:19:00Z</updated>
    <content type="html">&lt;p&gt;Hello from New York City! Tonight I'll be addressing the Cloud Foundry  User Group on how to &lt;a href="http://www.meetup.com/nyc-cloud-foundry/events/200768002/"&gt;build Spring Boot and Spring Cloud-based microservices that run on Cloud Foundry&lt;/a&gt; - I hope you'll join us! And if you're in Boston, then &lt;a href="http://www.meetup.com/Boston-Area-Cloud-Foundry-Meetup/events/203305332/"&gt;come hang out when I give the same talk there on Thursday&lt;/a&gt;!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spring Social lead and all around Spring ninja Craig Walls &lt;a href="http://spring.io/blog/2014/10/22/spring-sync-1-0-0-milestone-1-released"&gt;announced  the Spring Sync project&lt;/a&gt; and then &lt;a href="http://spring.io/blog/2014/10/22/introducing-spring-sync"&gt;wrote up a nice introduction to it&lt;/a&gt;, which - this is taken from the post because it's perfectly stated there -  addresses efficient communication between client applications and Spring backends by employing patch-based exchanges. So, basically, the one piece of the pie (after basic REST, HATEOAS and hypermedia, OAuth and security in general, all of which Spring supports capably and in a first-class way) missing in client/server communication (like REST) is now here!   If you read &lt;em&gt;one&lt;/em&gt; thing this week...&lt;/li&gt;
&lt;li&gt;Spring Batch lead Michael Minella &lt;a href="http://spring.io/blog/2014/10/28/spring-batch-3-0-2-release-is-now-available"&gt;just announced Spring Batch 3.0.2&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Spring Integration rockstar Artem Bilan just announced that &lt;a href="http://spring.io/blog/2014/10/27/spring-integration-4-1-rc1-released"&gt;Spring Integration 4.1 RC1&lt;/a&gt; - complete with websocket adapters, routing slip-pattern support, JDK &lt;code&gt;Optional&amp;lt;T&amp;gt;&lt;/code&gt; support, Redis Queue gateways, a Reactor-based &lt;code&gt;PersistentQueue&lt;/code&gt; implementation and a poller that can &lt;em&gt;skip&lt;/em&gt; polls (and - whew! - much more!) is now available! Yah. That's amazing. I always wondered why we didn't hear much from the Spring Integration team -- they're &lt;em&gt;busy&lt;/em&gt;!&lt;/li&gt;
&lt;li&gt;Not resting on his laurels after the Spring Integration release, Spring Integration and AMQP ninja Artem Bilan just &lt;a href="http://spring.io/blog/2014/10/23/spring-amqp-1-4-rc1-released"&gt;announced the Spring AMQP 1.4 RC1 release&lt;/a&gt; which provides a declarative, annotation-based model for building message listener containers in the same style as the newly introduce annotation-component model in Spring framework for JMS, among many other things.&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;Then, mark your calendars for the good Dr. Syer's webinar on Nov 4th  introducing &lt;a href="http://spring.io/blog/2014/10/01/webinar-architecting-for-continuous-delivery-microservices-with-pivotal-cf-and-spring-cloud"&gt;Security for Microservices with Spring and OAuth2&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Continuing the microservice webinar series on Nov 18, mark your calendars for Matt Stine and Donnie Berkholz from Redmonk &lt;a href="http://www.pivotal.io/platform-as-a-service/microservices-and-paas-a-match-made-in-the-cloud"&gt;Made for Each Other: Microservices + PaaS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;On Nov 20, join me and Adam Koblentz from the JRebel team to talk about &lt;a href="http://spring.io/blog/2014/10/28/webinar-spring-boot-and-jrebel-6-0"&gt;JRebel 6.0 and Spring Boot!&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;The 2nd replay in the microservice webinar series has been published!  (The 1st one is &lt;a href="http://spring.io/blog/2014/09/17/webinar-replay-building-bootiful-microservices-with-spring-boot"&gt;here&lt;/a&gt;, by the way).  So, don't miss Matt Stine's epic webinar: &lt;a href="http://spring.io/blog/2014/10/25/webinar-replay-architecting-for-continuous-delivery-microservices-with-pivotal-cf-and-spring-cloud"&gt;Architecting for Continuous Delivery: Microservices with Pivotal CF and Spring Cloud&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;We've just published an updated introduction tutorial (as opposed to the &lt;em&gt;very&lt;/em&gt; useful, but more narrowly focused &lt;a href="http://spring.io/guides"&gt;Spring IO guides&lt;/a&gt; to building REST services with Spring. We're iterating on it already, and would welcome any feedback.&lt;/li&gt;
&lt;li&gt;Do you want to use Jade templates with Spring Boot? Check out &lt;a href="https://github.com/domix/spring-boot-starter-jade4j"&gt;this handy Spring Boot Jade &lt;em&gt;starter&lt;/em&gt;&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;Check out Spring Data ninja &lt;a href="https://github.com/jOOQ/jOOQ/pull/3662"&gt;Thomas Darimont's example Spring Boot and jOOQ example&lt;/a&gt;&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;Spring Data lead Oliver Gierke's answered a few questions on Stack Overflow that I think are worth a read. First: &lt;a href="http://t.co/FYj1TX8tzO"&gt;why does the deployment of a Spring Boot application to a WebSphere 7 app server cause a ClassCastException?&lt;/a&gt; Then: &lt;a href="http://stackoverflow.com/questions/26543612/should-i-use-java-8-default-methods-for-manually-implemented-spring-data-reposit"&gt;Should I use Java 8 default methods for manually implemented Spring Data repository methods?&lt;/a&gt; Both are great reads, don't hesitate to check them out!&lt;/li&gt;
&lt;li&gt;Check out this &lt;a href="https://github.com/ssoudan/ktSpringTest"&gt;Spring Boot application written using the Kotlin language&lt;/a&gt;&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;Our pal  &lt;a href="http://www.javacodegeeks.com/2014/10/spring-boot-java-8-tomcat-8-on-openshift-with-diy.html"&gt;Rafal Borowiec put together a nice post introducing his steps to get a simple Spring Boot application on Java 8&lt;/a&gt; running on OpenShift. Spring Boot, of course, is as portable as can be, but his example used Java 8 which doesn't quite work the way you'd hope on OpenShift (yet), so he hit some bumps and was nice enough to chronicle all of them. Check it out!&lt;/li&gt;
&lt;li&gt;Our pal Toshiaki Maki put together an epic (Japanese language) post on  &lt;a href="http://qiita.com/making@github/items/250625275fa6c1ba74ac"&gt;the Spring Cloud configuration service &lt;/a&gt;. My Japanese is a bit rusty (&lt;em&gt;ahem!&lt;/em&gt;), but it was informative even through Google Translate.. :D&lt;/li&gt;
&lt;li&gt;Friendly reminder: check out Groovy language project lead Guillaume LaForge's &lt;a href="http://glaforge.appspot.com/article/groovy-weekly-42"&gt;&lt;em&gt;This Week in Groovy&lt;/em&gt;&lt;/a&gt; for all sorts of great Groovy and Groovy ecosystem awesomeness!&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Webinar: Spring Boot and JRebel 6.0</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/28/webinar-spring-boot-and-jrebel-6-0" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2014-10-29:1801</id>
    <updated>2014-10-28T21:31:00Z</updated>
    <content type="html">&lt;p&gt;Spring Boot and JRebel 6.0&lt;/p&gt;

&lt;p&gt;Speaker: Adam Koblentz, JRebel and Josh Long, Pivotal&lt;/p&gt;

&lt;p&gt;Spring Boot, the new convention-over-configuration centric framework from the Spring team at Pivotal, marries Spring's flexibility with conventional, common sense defaults to make application development not just fly, but pleasant! Spring Boot gives you a huge leg up over normal starter projects, now let's give you another boost by adding JRebel. With JRebel, the average Java developer saves over 1 work-month per year by using JRebel to skip rebuild, restart, and redeploys of their application. JRebel 6 launches on November 4, 2014 and  includes complete Spring Boot integration. Join Spring's Josh Long and ZeroTurnaround's Adam Koblentz and learn how to combine Boot with JRebel and get more done, in less time with less configuration.&lt;/p&gt;

&lt;p&gt;Thursday, Nov 20th, 2014 3:00PM GMT (London GMT) &lt;a href="http://connect.pivotal.io/OSS_Webinar_SpringBootandJRebel6.07AM_Register.html"&gt;Register&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thursday, Nov 20th, 2014 10:00AM PST (San Francisco GMT-08:00) &lt;a href="http://connect.pivotal.io/OSS_Webinar_SpringBootandJRebel6.010AM_Register.html"&gt;Register&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Batch 3.0.2.RELEASE is now available</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/28/spring-batch-3-0-2-release-is-now-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Michael Minella</name>
    </author>
    <id>tag:spring.io,2014-10-28:1798</id>
    <updated>2014-10-28T18:08:10Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce that Spring Batch 3.0.2.RELEASE is now available via Maven Central, Github and the SpringSource download repository.  This is the 2nd maintenance release for the 3.0.x branch of Spring Batch and addresses a number of bugs and a few minor enhancements.  Many thanks to all of those who submitted the many &lt;a href="https://github.com/springsource/spring-batch/pulls"&gt;pull requests&lt;/a&gt; that went into this release.&lt;br&gt;&lt;br&gt;
&lt;a href="http://spring.io/projects/spring-batch"&gt;Spring Batch Home&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-batch"&gt;Source on GitHub&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-batch/"&gt;Reference Documentation&lt;/a&gt;&lt;br&gt;&lt;br&gt;
We look forward to your feedback.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Integration 4.1 RC1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/27/spring-integration-4-1-rc1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Artem Bilan</name>
    </author>
    <id>tag:spring.io,2014-10-26:1797</id>
    <updated>2014-10-27T14:40:00Z</updated>
    <content type="html">&lt;p&gt;Dear Spring community,&lt;/p&gt;

&lt;p&gt;We are pleased to announce that the Spring Integration 4.1 Release Candidate is available.
Please use the &lt;a href="http://repo.springsource.org/milestone"&gt;Milestone Repository&lt;/a&gt; with Maven or Gradle, or download a &lt;a href="http://repo.spring.io/milestone/org/springframework/integration/spring-integration/4.1.0.RC1"&gt;distribution archive&lt;/a&gt;, to give it a spin.&lt;/p&gt;

&lt;p&gt;The release includes many new features and improvements, as well as a number of bug fixes. The GA release
is planned in early November.&lt;/p&gt;

&lt;p&gt;First of all, thank you all who provided feedback for the
&lt;a href="https://spring.io/blog/2014/09/05/spring-integration-4-1-milestone-1-available"&gt;4.1 Milestone 1&lt;/a&gt; and
submitted reports (bugs or new features). A special thanks to those who provided contribution via Pull Requests.
Here is a summary of major changes since the milestone:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Web Sockets support&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This feature was introduced in 4.1 Milestone 1, but several issues have been resolved, and we have now
provided a couple of samples to better understand how Web Sockets can be used in Spring Integration applications:
&lt;a href="https://github.com/spring-projects/spring-integration-samples/tree/master/basic/web-sockets"&gt;Basic&lt;/a&gt; and
&lt;a href="https://github.com/spring-projects/spring-integration-samples/tree/master/applications/stomp-chat"&gt;STOMP Chat&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JDK8 Optional&amp;lt;?&amp;gt; consistent handling&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are using Java 8, you'll be able to use the &lt;code&gt;Optional&amp;lt;?&amp;gt;&lt;/code&gt; container for service method arguments. For example:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;optionals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Payload&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"@myConvert.conv(payload)"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Bar&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nd"&gt;@Header&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this case, if &lt;code&gt;@myConvert.conv(payload)&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;, the &lt;code&gt;payload&lt;/code&gt; variable will contain an &lt;code&gt;Optional.empty()&lt;/code&gt;.
The same thing for &lt;code&gt;header&lt;/code&gt; variables - if there is no &lt;code&gt;foo&lt;/code&gt; header in the request &lt;code&gt;Message&amp;lt;?&amp;gt;&lt;/code&gt;. This can be used
as an alternative to the &lt;code&gt;required&lt;/code&gt; attribute on a &lt;code&gt;@Header&lt;/code&gt; annotation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Routing Slip pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://www.enterpriseintegrationpatterns.com/RoutingTable.html"&gt;Routing Slip&lt;/a&gt; pattern is now supported. Rather
than a simple &lt;code&gt;static list of channel names&lt;/code&gt;, we have introduced the &lt;code&gt;RoutingSlipRouteStrategy&lt;/code&gt;, which provides
dynamic runtime routing based on the request &lt;code&gt;Message&amp;lt;?&amp;gt;&lt;/code&gt; and &lt;code&gt;reply object&lt;/code&gt;. SpEL is supported too:&lt;/p&gt;

&lt;div class="highlight highlight-xml"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;header-enricher&lt;/span&gt; &lt;span class="na"&gt;input-channel=&lt;/span&gt;&lt;span class="s"&gt;"input"&lt;/span&gt; &lt;span class="na"&gt;output-channel=&lt;/span&gt;&lt;span class="s"&gt;"process"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;routing-slip&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"channel1; request.headers[myRoutingSlipChannel];&lt;/span&gt;
&lt;span class="s"&gt;                            routingSlipRoutingStrategy;"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/header-enricher&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This pattern is useful in complex, dynamic, cases when it can become difficult to configure multiple routers to determine
message flow. With this enhancement, when a message
arrives at an endpoint that has no &lt;code&gt;output-channel&lt;/code&gt;, the routing slip is consulted to determine the next channel to which
the message will be sent. When the routing slip is exhausted, normal &lt;code&gt;replyChannel&lt;/code&gt; processing resumes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Idempotent Receiver pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With this release we have implemented the
&lt;a href="http://www.enterpriseintegrationpatterns.com/IdempotentReceiver.html"&gt;Idempotent Receiver&lt;/a&gt; as a first class feature.
Previously, users would have to implement this pattern, by using a custom &lt;code&gt;MessageSelector&lt;/code&gt; in a &lt;code&gt;&amp;lt;filter/&amp;gt;&lt;/code&gt;, for example.
The framework now supports this capability as an &lt;code&gt;Advice&lt;/code&gt; component that can be applied to any consuming endpoint:&lt;/p&gt;

&lt;div class="highlight highlight-xml"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;idempotent-receiver&lt;/span&gt; &lt;span class="na"&gt;endpoint=&lt;/span&gt;&lt;span class="s"&gt;"endpoint1, foo*"&lt;/span&gt;
                     &lt;span class="na"&gt;metadata-store=&lt;/span&gt;&lt;span class="s"&gt;"store"&lt;/span&gt;
                     &lt;span class="na"&gt;discard-channel=&lt;/span&gt;&lt;span class="s"&gt;"duplicates"&lt;/span&gt;
                     &lt;span class="na"&gt;key-expression=&lt;/span&gt;&lt;span class="s"&gt;"payload.invoiceNumber"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This creates an AOP &lt;code&gt;IdempotentReceiverInterceptor&lt;/code&gt; which is applied to the &lt;code&gt;MessageHandler#handleMessage&lt;/code&gt; within endpoints
where the &lt;code&gt;id&lt;/code&gt; matches one of the provided &lt;code&gt;endpoint&lt;/code&gt; patterns.&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;discard-channel&lt;/code&gt; is omitted, a duplicate message is still sent to the message handler, but it will contain a
&lt;code&gt;duplicateMessage&lt;/code&gt; header, allowing user code to take further action.&lt;/p&gt;

&lt;p&gt;For JavaConfig, the &lt;code&gt;@IdempotentReceiver&lt;/code&gt; annotation is provided, however the &lt;code&gt;IdempotentReceiverInterceptor&lt;/code&gt; &lt;code&gt;@Bean&lt;/code&gt; must
 be configured too:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@Bean&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IdempotentReceiverInterceptor&lt;/span&gt; &lt;span class="nf"&gt;idempotentReceiverInterceptor&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;IdempotentReceiverInterceptor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MetadataStoreSelector&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
                                                    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPayload&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;@Bean&lt;/span&gt;
&lt;span class="nd"&gt;@ServiceActivator&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputChannel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"input"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outputChannel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"output"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@IdempotentReceiver&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"idempotentReceiverInterceptor"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;MessageHandler&lt;/span&gt; &lt;span class="nf"&gt;myService&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;....&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For more information, please, read &lt;code&gt;IdempotentReceiverInterceptor&lt;/code&gt; JavaDocs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scatter-Gather pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://www.enterpriseintegrationpatterns.com/BroadcastAggregate.html"&gt;Scatter-Gather&lt;/a&gt;
Enterprise Integration Pattern is now provided:&lt;/p&gt;

&lt;div class="highlight highlight-xml"&gt;&lt;pre&gt;&lt;span class="c"&gt;&amp;lt;!--Auction scenario--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;scatter-gather&lt;/span&gt; &lt;span class="na"&gt;input-channel=&lt;/span&gt;&lt;span class="s"&gt;"inputAuction"&lt;/span&gt; &lt;span class="na"&gt;output-channel=&lt;/span&gt;&lt;span class="s"&gt;"output"&lt;/span&gt;
                &lt;span class="na"&gt;scatter-channel=&lt;/span&gt;&lt;span class="s"&gt;"auctionChannel"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;gatherer&lt;/span&gt; &lt;span class="na"&gt;release-strategy-expression=&lt;/span&gt;&lt;span class="s"&gt;"^[payload gt 5] != null or size() == 3"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/scatter-gather&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!--Distribution scenario--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;scatter-gather&lt;/span&gt; &lt;span class="na"&gt;input-channel=&lt;/span&gt;&lt;span class="s"&gt;"inputDistribution"&lt;/span&gt; &lt;span class="na"&gt;output-channel=&lt;/span&gt;&lt;span class="s"&gt;"output"&lt;/span&gt;
                &lt;span class="na"&gt;gather-channel=&lt;/span&gt;&lt;span class="s"&gt;"gatherChannel"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;scatterer&lt;/span&gt; &lt;span class="na"&gt;apply-sequence=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;recipient&lt;/span&gt; &lt;span class="na"&gt;channel=&lt;/span&gt;&lt;span class="s"&gt;"distribution1Channel"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;recipient&lt;/span&gt; &lt;span class="na"&gt;channel=&lt;/span&gt;&lt;span class="s"&gt;"distribution2Channel"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;recipient&lt;/span&gt; &lt;span class="na"&gt;channel=&lt;/span&gt;&lt;span class="s"&gt;"distribution3Channel"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/scatterer&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;gatherer&lt;/span&gt; &lt;span class="na"&gt;release-strategy-expression=&lt;/span&gt;&lt;span class="s"&gt;"^[payload gt 5] != null or size() == 3"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/scatter-gather&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It is a compound endpoint, which combines &lt;code&gt;publish-subscribe&lt;/code&gt; logic and an &lt;code&gt;aggregation&lt;/code&gt; function.
Of course, it could previously be implemented as an integration flow using the existing &lt;code&gt;publish-subscribe-channel&lt;/code&gt;,
or &lt;code&gt;recipient-list-router&lt;/code&gt;, together with an &lt;code&gt;aggregator&lt;/code&gt;
component, but this new feature provides for a cleaner implementation of scenarios such as &lt;code&gt;best quote&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redis Queue Gateways&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A pair of &lt;code&gt;request-reply&lt;/code&gt; (inbound and outbound) gateway components based on &lt;code&gt;Redis List&lt;/code&gt;s have been added to the &lt;code&gt;Redis&lt;/code&gt; module:&lt;/p&gt;

&lt;div class="highlight highlight-xml"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;int-redis:queue-outbound-gateway&lt;/span&gt; &lt;span class="na"&gt;request-channel=&lt;/span&gt;&lt;span class="s"&gt;"sendChannel"&lt;/span&gt; &lt;span class="na"&gt;queue=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;int-redis:queue-inbound-gateway&lt;/span&gt; &lt;span class="na"&gt;request-channel=&lt;/span&gt;&lt;span class="s"&gt;"requestChannel"&lt;/span&gt; &lt;span class="na"&gt;queue=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Reactor's PersistentQueue&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;QueueChannel&lt;/code&gt; has been changed to allow inject any &lt;code&gt;Queue&amp;lt;?&amp;gt;&lt;/code&gt; implementation. This was done to allow the
use of the &lt;a href="https://github.com/OpenHFT/Chronicle-Queue"&gt;Chronicle-Queue&lt;/a&gt; implementation in the &lt;a href="http://reactor.github.io/reactor/"&gt;Reactor&lt;/a&gt; project:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@Bean&lt;/span&gt; &lt;span class="n"&gt;QueueChannel&lt;/span&gt; &lt;span class="nf"&gt;queueChannel&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;QueueChannel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PersistentQueueSpec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&amp;gt;&amp;gt;()&lt;/span&gt;
                                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;codec&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JavaSerializationCodec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;())&lt;/span&gt;
                                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;basePath&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/usr/queuePath"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Skipping Polls&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When using polling endpoints, it is sometimes necessary to "skip" polls, perhaps because some downstream condition might
cause a failure or, say, a task executor pool has no available threads. This release adds the &lt;code&gt;PollSkipAdvice&lt;/code&gt; that
can be inserted in the poller's advice chain, with the skip logic based on user-supplied code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Spring Integration 4.1 requires Spring Framework 4.1&lt;/li&gt;
&lt;li&gt;While JDK8 is now required to &lt;strong&gt;build&lt;/strong&gt; Spring Integration, the framework remains compatible with Java 6 at runtime.&lt;/li&gt;
&lt;li&gt;We expect to announce the availability of the &lt;a href="https://github.com/spring-projects/spring-integration-extensions/tree/master/spring-integration-java-dsl"&gt;Spring Integration Java DSL&lt;/a&gt; release candidate later this week.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;See the &lt;a href="https://jira.spring.io/secure/ReleaseNote.jspa?projectId=10121&amp;amp;version=14521"&gt;Release Notes&lt;/a&gt; for this release
and the &lt;a href="http://projects.spring.io/spring-integration/"&gt;Project Page&lt;/a&gt; for more information. For a complete
list of "What's new" in the 4.1 release, see the &lt;a href="http://docs.spring.io/spring-integration/docs/4.1.0.RC1/reference/html/whats-new.html"&gt;reference documentation&lt;/a&gt;. Users upgrading from earlier releases should consult the various &lt;a href="https://github.com/spring-projects/spring-integration/wiki"&gt;migration guides&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As always, we very much welcome &lt;a href="https://github.com/spring-projects/spring-integration/blob/master/CONTRIBUTING.md"&gt;contributions&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Webinar Replay: Architecting for Continuous Delivery: Microservices with Pivotal CF and Spring Cloud</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/25/webinar-replay-architecting-for-continuous-delivery-microservices-with-pivotal-cf-and-spring-cloud" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2014-10-26:1796</id>
    <updated>2014-10-25T21:54:00Z</updated>
    <content type="html">&lt;p&gt;Speaker: Matt Stine, Pivotal&lt;/p&gt;

&lt;p&gt;Slides: &lt;a href="https://speakerdeck.com/mstine/architecting-for-continuous-delivery-microservices-with-pivotal-cf-and-spring-cloud"&gt;https://speakerdeck.com/mstine/architecting-for-continuous-delivery-microservices-with-pivotal-cf-and-spring-cloud&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; Join Matt Stine to hear how you can architect systems that are optimized for continuous delivery, allowing you to innovate and deliver value faster and safer. Microservices, Pivotal CF, and Spring Cloud combine to create an operationalized architecture that enables enterprises to continuously deliver value at scale through rapid, iterative development, and to meet the needs of a mobile-first world.&lt;/p&gt;

&lt;p&gt;Learn more about Spring Cloud: &lt;a href="http://projects.spring.io/spring-cloud"&gt;http://projects.spring.io/spring-cloud&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn more about Cloud Foundry: &lt;a href="http://cloudfoundry.org"&gt;http://cloudfoundry.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn more about Pivotal CF: &lt;a href="http://www.pivotal.io/platform-as-a-service/pivotal-cf"&gt;http://www.pivotal.io/platform-as-a-service/pivotal-cf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;iframe width="420" height="315" src="//www.youtube.com/embed/vm8PcbcsYxU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>Spring AMQP 1.4 RC1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/23/spring-amqp-1-4-rc1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Artem Bilan</name>
    </author>
    <id>tag:spring.io,2014-10-23:1794</id>
    <updated>2014-10-23T18:37:00Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce the availability of the Release Candidate for Spring AMQP 1.4; the GA is planned to be released in early November.&lt;/p&gt;

&lt;p&gt;First of all, thank you all who provided feedback for the &lt;a href="https://spring.io/blog/2014/09/05/spring-amqp-for-java-1-4-milestone-1-available"&gt;milestone 1.4 M1 version&lt;/a&gt; and submitted reports (bugs or new features).
Special thanks to &lt;a href="https://spring.io/team/snicoll/"&gt;Stéphane Nicoll&lt;/a&gt;, who had introduced annotation-based message
listeners (&lt;code&gt;@RabbitListener&lt;/code&gt;) and the new &lt;code&gt;RabbitMessagingTemplate&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
&lt;a name="user-content-features-and-fixes-included-in-this-release-changes-since-the-milestone" class="anchor" href="#features-and-fixes-included-in-this-release-changes-since-the-milestone" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Features and fixes included in this release (changes since the milestone)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;With the annotation-based message listener you can use the &lt;code&gt;@SendTo&lt;/code&gt; annotation to send the result of the method as a reply message (when there's no &lt;code&gt;replyTo&lt;/code&gt; in the inbound message):&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@RabbitListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"capitalize"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@SendTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"capitalize.reply"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;capitalize&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toUpperCase&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(Annotation-basd listeners require Spring Framework 4.1.x).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A new &lt;code&gt;RabbitMessagingTemplate&lt;/code&gt; has been introduced, allowing the use of the &lt;code&gt;spring-messaging&lt;/code&gt; &lt;code&gt;Message&amp;lt;?&amp;gt;&lt;/code&gt; abstraction as an alternative to the Spring AMQP &lt;code&gt;Message&lt;/code&gt; (Spring Messaging &lt;code&gt;Message&amp;lt;?&amp;gt;&lt;/code&gt; is also supported by the annotated listeners). &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Logback &lt;code&gt;AmqpAppender&lt;/code&gt; is now available, with configuration similar to the existing Log4j &lt;code&gt;AmqpAppender&lt;/code&gt;:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight highlight-xml"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;appender&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"AMQP"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"org.springframework.amqp.rabbit.logback.AmqpAppender"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;layout&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;![CDATA[ %d %p %t [%c] - &amp;lt;%m&amp;gt;%n ]]&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/layout&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;abbreviation&amp;gt;&lt;/span&gt;36&lt;span class="nt"&gt;&amp;lt;/abbreviation&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;applicationId&amp;gt;&lt;/span&gt;MyApplication&lt;span class="nt"&gt;&amp;lt;/applicationId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;routingKeyPattern&amp;gt;&lt;/span&gt;%property{applicationId}.%c.%p&lt;span class="nt"&gt;&amp;lt;/routingKeyPattern&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;generateId&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/generateId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;charset&amp;gt;&lt;/span&gt;UTF-8&lt;span class="nt"&gt;&amp;lt;/charset&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;durable&amp;gt;&lt;/span&gt;false&lt;span class="nt"&gt;&amp;lt;/durable&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;deliveryMode&amp;gt;&lt;/span&gt;NON_PERSISTENT&lt;span class="nt"&gt;&amp;lt;/deliveryMode&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;RabbitTemplate&lt;/code&gt; can now be configured with an &lt;code&gt;AbstractRoutingConnectionFactory&lt;/code&gt; with &lt;code&gt;expression&lt;/code&gt; attributes to determine the target &lt;code&gt;ConnectionFactory&lt;/code&gt; depending on the &lt;code&gt;RabbitTemplate&lt;/code&gt; operation:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight highlight-xml"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;rabbit:template&lt;/span&gt; &lt;span class="na"&gt;connection-factory=&lt;/span&gt;&lt;span class="s"&gt;"RoutingConnectionFactory"&lt;/span&gt;
     &lt;span class="na"&gt;send-connection-factory-selector-expression=&lt;/span&gt;&lt;span class="s"&gt;"messageProperties.userId"&lt;/span&gt;
     &lt;span class="na"&gt;receive-connection-factory-selector-expression=&lt;/span&gt;&lt;span class="s"&gt;"#root == 'fooQueue' ? 'foo' : null"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;In addition, the &lt;code&gt;mandatory-expression&lt;/code&gt; attribute has been added to the &lt;code&gt;RabbitTemplate&lt;/code&gt; to set the &lt;code&gt;mandatory&lt;/code&gt; flag for each sent message:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight highlight-xml"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;rabbit:template&lt;/span&gt; &lt;span class="na"&gt;connection-factory=&lt;/span&gt;&lt;span class="s"&gt;"connectionFactory"&lt;/span&gt;
      &lt;span class="na"&gt;mandatory-expression=&lt;/span&gt;&lt;span class="s"&gt;"messageProperties.contentType == 'application/json'"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(Previously, &lt;code&gt;mandatory&lt;/code&gt; was set at the template level).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;AbstractRoutingConnectionFactory&lt;/code&gt; is now also supported for the &lt;code&gt;MessageListenerContainer&lt;/code&gt;, where the &lt;code&gt;key&lt;/code&gt; for
the target &lt;code&gt;ConnectionFactory&lt;/code&gt; is based on the configured &lt;code&gt;queueNames&lt;/code&gt; array&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the &lt;a href="https://jira.spring.io/secure/ReleaseNote.jspa?version=14724&amp;amp;projectId=10450"&gt;Release Notes&lt;/a&gt;
and the &lt;a href="http://projects.spring.io/spring-amqp/"&gt;Project Page&lt;/a&gt; for more information.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>See how to build, test, secure, and add hypermedia with this new tutorial, "Building REST Services with Spring"</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/23/see-how-to-build-test-secure-and-add-hypermedia-with-this-new-tutorial-building-rest-services-with-spring" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Greg Turnquist</name>
    </author>
    <id>tag:spring.io,2014-10-23:1795</id>
    <updated>2014-10-23T17:10:33Z</updated>
    <content type="html">&lt;p&gt;Greetings Spring Community!&lt;/p&gt;

&lt;p&gt;Today we have released a new tutorial written by Spring geek &lt;a href="http://spring.io/team/jlong"&gt;Josh Long&lt;/a&gt;, the man who travels the globe talking about Spring: &lt;a href="http://spring.io/guides/tutorials/bookmarks"&gt;Building REST Services with Spring&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this sleek tutorial, you can read about the simplicity and power of building RESTful web services using Spring. You'll also see how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Test them with Spring's powerful MockMvc&lt;/li&gt;
&lt;li&gt;Secure them with &lt;a href="http://projects.spring.io/spring-security"&gt;Spring Security&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Plugin error handling&lt;/li&gt;
&lt;li&gt;Add &lt;a href="http://projects.spring.io/spring-hateoas"&gt;hypermedia controls&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Dabble with &lt;a href="http://projects.spring.io/spring-security-oauth"&gt;OAuth&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;See it all using &lt;a href="http://projects.spring.io/spring-boot"&gt;Spring Boot&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It's a really good read with LOTS of code (you know, the important stuff). What about the existing REST tutorial? It was a bit dated on concepts we wanted to cover and state-of-the-art, so it has been retired in favor of this one.&lt;/p&gt;

&lt;p&gt;Share and enjoy!&lt;/p&gt;</content>
  </entry>
</feed>

